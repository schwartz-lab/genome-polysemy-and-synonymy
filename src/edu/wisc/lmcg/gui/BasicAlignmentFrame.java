/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package edu.wisc.lmcg.gui;

import edu.wisc.lmcg.alignment.AlignmentException;
import edu.wisc.lmcg.alignment.contigrun.AlignerAlgorithmContigRunFactory;
import edu.wisc.lmcg.alignment.contigrun.ContigRun;
import edu.wisc.lmcg.alignment.contigrun.MihaiPopSomaContigRunFactory;
import edu.wisc.lmcg.alignment.mapalignment.MapAlignment;
import static edu.wisc.lmcg.gui.MapGUI.getScalatedIcon;
import edu.wisc.lmcg.map.RestrictionMap;
import edu.wisc.lmcg.map.SimpleRestrictionMap;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.nio.file.Files;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractListModel;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.ListModel;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author dipaco
 */
public class BasicAlignmentFrame extends javax.swing.JFrame {

    private final GPSController controller;
    private List<SimpleRestrictionMap> referenceMaps;
    private List<SimpleRestrictionMap> unalignedMaps;
    private ContigRun crun = null;
    AlignerAlgorithmContigRunFactory aacr_factory = new MihaiPopSomaContigRunFactory();
    
    private final String OPEN_ALIGNMENT_ICON = "/edu/wisc/lmcg/resources/open.png";
    private final String SAVE_ALIGNMENT_ICON = "/edu/wisc/lmcg/resources/save_alignment.png";
    private final String DO_ALIGNMENT_ICON = "/edu/wisc/lmcg/resources/do_alignment.png";
    
    /**
     * Creates new form BasicAlignmentForm
     * @param controller This variable allows to control some useful functionalities from the GPS software
     */
    public BasicAlignmentFrame(GPSController controller  ) {
        initComponents();
        
        //Uses the open icon for the reference maps and Unaligned maps buttons.
        this.btnUnalignedMaps.setIcon(new ImageIcon(MapGUI.getScalatedIcon(OPEN_ALIGNMENT_ICON, 16, 16)));
        this.btnReferenceMaps.setIcon(new ImageIcon(MapGUI.getScalatedIcon(OPEN_ALIGNMENT_ICON, 16, 16)));
        
        this.controller = controller;
        this.cbReferenceMaps.removeAllItems();
        this.jlUnalignedMaps.setModel(new DefaultListModel());
        
        this.btnSaveToXml.setEnabled(false);
        this.btnSaveToXml.setIcon(new ImageIcon(getScalatedIcon(SAVE_ALIGNMENT_ICON, 16, 16)));        
        
        this.doAlignment_btn.setIcon(new ImageIcon(getScalatedIcon(DO_ALIGNMENT_ICON, 16, 16)));
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jRadioButton1 = new javax.swing.JRadioButton();
        jToggleButton1 = new javax.swing.JToggleButton();
        doAlignment_btn = new javax.swing.JButton();
        txtReferenceMapsFilename = new javax.swing.JTextField();
        txtUnalignedMaps = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        btnReferenceMaps = new javax.swing.JButton();
        btnUnalignedMaps = new javax.swing.JButton();
        jProgressBar1 = new javax.swing.JProgressBar();
        btnSaveToXml = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane2 = new javax.swing.JScrollPane();
        jlUnalignedMaps = new javax.swing.JList();
        cbReferenceMaps = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        jRadioButton1.setText("jRadioButton1");
        jScrollPane1.setViewportView(jRadioButton1);

        jToggleButton1.setText("jToggleButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(600, 400));
        setResizable(false);

        doAlignment_btn.setText("Align");
        doAlignment_btn.setName("doAlignment_btn"); // NOI18N
        doAlignment_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doAlignment_btnActionPerformed(evt);
            }
        });

        txtReferenceMapsFilename.setEnabled(false);

        txtUnalignedMaps.setEnabled(false);

        jLabel1.setText("Reference maps file: ");

        jLabel2.setText("Unaligned maps: ");

        btnReferenceMaps.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReferenceMapsActionPerformed(evt);
            }
        });

        btnUnalignedMaps.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUnalignedMapsActionPerformed(evt);
            }
        });

        btnSaveToXml.setText("Save To a xml file");
        btnSaveToXml.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveToXmlActionPerformed(evt);
            }
        });

        jlUnalignedMaps.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(jlUnalignedMaps);

        cbReferenceMaps.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel3.setText("Select the reference map:");

        jLabel4.setText("These maps will be aligned with the reference map:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel3))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(doAlignment_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnSaveToXml))
                            .addComponent(cbReferenceMaps, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel2))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtUnalignedMaps)
                                    .addComponent(txtReferenceMapsFilename))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(btnUnalignedMaps, javax.swing.GroupLayout.DEFAULT_SIZE, 33, Short.MAX_VALUE)
                                    .addComponent(btnReferenceMaps, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addComponent(jSeparator1))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnReferenceMaps, javax.swing.GroupLayout.DEFAULT_SIZE, 34, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtReferenceMapsFilename, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnUnalignedMaps, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 35, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtUnalignedMaps, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel2)))
                .addGap(18, 18, 18)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addGap(10, 10, 10)
                .addComponent(cbReferenceMaps, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addGap(8, 8, 8)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSaveToXml)
                    .addComponent(doAlignment_btn))
                .addGap(15, 15, 15)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Performs all the activities for doing the alignment
     * @param evt Event parameters
     */
    private void doAlignment_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doAlignment_btnActionPerformed

        //Checks all the requirements and paramters before doing the alignment
        if ( 
                txtReferenceMapsFilename.getText().equals("") ||
                cbReferenceMaps.getItemCount() == 0 ||
                cbReferenceMaps.getSelectedIndex() < 0 ||
                txtUnalignedMaps.getText().equals("") ||
                jlUnalignedMaps.getModel().getSize() == 0
                ){
            showMessage("You must select all the parameters properly before performing the alignment.", "Alignment", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        
         //"refMap"
         //"unalignedMaps"
        TreeMap<String, Object> pars = new TreeMap<>();
        pars.put("refMap", referenceMaps.get(cbReferenceMaps.getSelectedIndex()));
        pars.put("unalignedMaps", unalignedMaps);        
        try {
            aacr_factory.performAlignment(pars);
            
            this.btnSaveToXml.setEnabled(true);
            
            /*try {
            //Creates a temporary folder to store the intermediate data of the alignment
            File baseDire = File.createTempFile("temp", Long.toString(System.nanoTime()));                                    
            if(!(baseDire.delete()))
            {
            throw new IOException("Could not delete temp file: " + baseDire.getAbsolutePath());
            }
            if(!(baseDire.mkdir()))
            {
            throw new IOException("Could not create temp directory: " + baseDire.getAbsolutePath());
            }
            baseDire.deleteOnExit();
            
            
            File silicoFile = new File(baseDire, "contigs.silico");
            File optFile = new File(baseDire, "reference_map.opt");
            SimpleRestrictionMap referenceMap = referenceMaps.get(cbReferenceMaps.getSelectedIndex());
            
            //Writes the reference map into a .opt file
            this.controller.restrictionMap2OptFormat(referenceMap,  optFile.getAbsolutePath());
            
            //Writes all the maps to be aligned into a .silico file
            this.controller.restrictionMaps2SilicoFormat(unalignedMaps, silicoFile.getAbsolutePath());
            
            //Perform the alignment
            this.controller.alignMaps(
            baseDire.getAbsolutePath(),
            silicoFile.getAbsolutePath(),
            optFile.getAbsolutePath());
            
            List<MapAlignment> map_alignment = this.controller.constructMapAligment(referenceMap, unalignedMaps, baseDire.getAbsolutePath());
            
            if ( map_alignment != null && map_alignment.size() > 0 ){
            
            this.btnViewAlignment.setEnabled(true);
            this.btnSaveToXml.setEnabled(true);
            }
            
            } catch (IOException ex) {
            Logger.getLogger(BasicAlignmentFrame.class.getName()).log(Level.SEVERE, null, ex);
            }*/
        } catch (AlignmentException ex) {
            
        }
    }//GEN-LAST:event_doAlignment_btnActionPerformed

    private void showMessage(String message, String Title, int messageType){
        JOptionPane.showMessageDialog(this, message, Title, messageType);
    }
    
    private void btnReferenceMapsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReferenceMapsActionPerformed
        
        //get the file chosen by the user
        JFileChooser fc = new JFileChooser();
        int returnVal = fc.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File referenceMapsFile = fc.getSelectedFile();
            
            referenceMaps = this.controller.parseMapsFile(referenceMapsFile);
            
            if ( referenceMaps == null || referenceMaps.isEmpty() ){
                txtReferenceMapsFilename.setText("");
                showMessage("It wasn't possible to read any reference map from the selected file.", "Reading reference maps", JOptionPane.ERROR_MESSAGE);
            }else{
                cbReferenceMaps.removeAllItems();
                for( SimpleRestrictionMap srm : referenceMaps ){
                    cbReferenceMaps.addItem("Name: " + srm.getName() + ", Enzyme: " + srm.getEnzyme());
                }
                
                txtReferenceMapsFilename.setText(referenceMapsFile.getAbsolutePath());
            }
        }
    }//GEN-LAST:event_btnReferenceMapsActionPerformed

    private void btnUnalignedMapsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUnalignedMapsActionPerformed
        //get the file chosen by the user
        JFileChooser fc = new JFileChooser();
        int returnVal = fc.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File unalignedMapsFile = fc.getSelectedFile();
            
            unalignedMaps = this.controller.parseMapsFile(unalignedMapsFile);
            
            if ( unalignedMaps == null || unalignedMaps.isEmpty() ){
                txtUnalignedMaps.setText("");
                showMessage("It wasn't possible to read any fragment from the selected file.", "Reading unaligned maps", JOptionPane.ERROR_MESSAGE);
            }else{                
                DefaultListModel<String> lm = new DefaultListModel<>();
                for( SimpleRestrictionMap srm : unalignedMaps ){
                    lm.addElement("Name: " + srm.getName() + ", Enzyme: " + srm.getEnzyme());                    
                }
                jlUnalignedMaps.setModel(lm);
                jlUnalignedMaps.clearSelection();
                txtUnalignedMaps.setText(unalignedMapsFile.getAbsolutePath());
            }
        }
    }//GEN-LAST:event_btnUnalignedMapsActionPerformed

    private void btnSaveToXmlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveToXmlActionPerformed
        JFileChooser fc = new JFileChooser();
        FileNameExtensionFilter xmlFilter = new FileNameExtensionFilter("Alignment file (*.xml)", "xml");            
        fc.addChoosableFileFilter(xmlFilter);
        fc.setFileFilter(xmlFilter);
        int returnVal = fc.showSaveDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            
            String out_filename = fc.getSelectedFile().getAbsolutePath();
            if ( fc.getFileFilter().equals(xmlFilter) ){
                out_filename = fc.getSelectedFile().getAbsolutePath();
                if ( !out_filename.endsWith(".xml") )
                    out_filename += ".xml";
            }
            
            PrintWriter xmlWriter = null;
            try {
                xmlWriter = new PrintWriter(new File(out_filename));
                xmlWriter.print(aacr_factory.getNextContigRun().getContigAsXml());
                
                JOptionPane.showMessageDialog(rootPane, "The xml file with the alignment information has been saved.", "Alignment", JOptionPane.INFORMATION_MESSAGE);
                
            } catch (FileNotFoundException e) {
                JOptionPane.showMessageDialog(this,
                        "there's no way this message will ever get printed.",
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
                return;
            }catch (IOException e) {
                JOptionPane.showMessageDialog(this,
                        "Unexpected problem, the file could not be saved",
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
                e.printStackTrace();
            } catch (Exception ex) {
                Logger.getLogger(BasicAlignmentFrame.class.getName()).log(Level.SEVERE, null, ex);
            } finally {
                xmlWriter.close();
            }
        }
        return;
    }//GEN-LAST:event_btnSaveToXmlActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnReferenceMaps;
    private javax.swing.JButton btnSaveToXml;
    private javax.swing.JButton btnUnalignedMaps;
    private javax.swing.JComboBox cbReferenceMaps;
    private javax.swing.JButton doAlignment_btn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JToggleButton jToggleButton1;
    private javax.swing.JList jlUnalignedMaps;
    private javax.swing.JTextField txtReferenceMapsFilename;
    private javax.swing.JTextField txtUnalignedMaps;
    // End of variables declaration//GEN-END:variables
}
